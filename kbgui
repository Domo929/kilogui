#!/usr/bin/env python
# @author Alex Cornejo

KILO_COMMANDS = ["Bootload","Sleep","Wakeup","Pause","Voltage","Run","Charge","Stop","LedsToggle","BootloadMsg","Reset"]
DEFAULT_CONTROL_FILE = "control.hex"
DEFAULT_PROGRAM_FILE = "program.hex"

import gtk
import os
import subprocess # checkoutput
import tempfile # mkstemp

class KilobotsGUI:
    def __init__(self):
        window = gtk.Window()
        window.set_title("Kilobots Toolbox")
        window.connect("destroy", lambda w: gtk.main_quit())
        window.set_default_size(300, -1)

        self.controlfile = DEFAULT_CONTROL_FILE
        self.programfile = DEFAULT_PROGRAM_FILE

        # Create HEX File fitler
        hexfilter = gtk.FileFilter()
        hexfilter.set_name("HEX Files")
        hexfilter.add_pattern("*.hex")

        # control select button
        controlfile_label = gtk.Label("Control:")
        controlfile_button = gtk.FileChooserButton("Select control")
        controlfile_button.set_filename(self.controlfile)
        controlfile_button.add_filter(hexfilter)
        controlfile_button.set_action(gtk.FILE_CHOOSER_ACTION_OPEN)
        controlfile_button.connect("file-set", self.controlfile_selected)
        controlfile_button.connect("update-preview", self.controlfile_selected)

        # Program select button
        programfile_label= gtk.Label("Program:")
        programfile_button = gtk.FileChooserButton("Select Program")
        programfile_button.set_filename(self.programfile)
        programfile_button.add_filter(hexfilter)
        programfile_button.set_action(gtk.FILE_CHOOSER_ACTION_OPEN)
        programfile_button.connect("file-set", self.programfile_selected)
        programfile_button.connect("update-preview", self.programfile_selected)

        # Program AVR button
        program_button = gtk.Button("Program")
        program_button.connect("clicked", self.program_avr)

        # Kilo Command Buttons
        split = len(KILO_COMMANDS)/2
        if split*2 < len(KILO_COMMANDS):
            split=split+1

        bbox1 = gtk.VButtonBox()
        bbox1.set_spacing(gtk.BUTTONBOX_SPREAD)
        for cmd in KILO_COMMANDS[0:split]:
            button = gtk.Button(cmd)
            button.connect('clicked', self.kbsend, cmd)
            bbox1.add(button)
        bbox2 = gtk.VButtonBox()
        bbox2.set_spacing(gtk.BUTTONBOX_SPREAD)
        for cmd in KILO_COMMANDS[split:]:
            button = gtk.Button(cmd)
            button.connect('clicked', self.kbsend, cmd)
            bbox2.add(button)
        if split*2 != len(KILO_COMMANDS):
            button = gtk.Button("")
            button.set_visible(False)
            button.set_sensitive(False)
            bbox2.add(button)

        # Set up layout of items on window
        vbox = gtk.VBox()
        hbox_control = gtk.HBox()
        hbox_control.pack_start(controlfile_label, True, True,0)
        hbox_control.pack_start(controlfile_button, True, True, 0)
        hbox_program = gtk.HBox()
        hbox_program.pack_start(programfile_label, True, True,0)
        hbox_program.pack_start(programfile_button, True, True, 0)
        vbox.pack_start(hbox_control, False, False, 0)
        vbox.pack_start(hbox_program, False, False, 0)
        vbox.pack_start(program_button, False, False, 0)
        hbox_buttons = gtk.HBox()
        hbox_buttons.add(bbox1)
        hbox_buttons.add(bbox2)
        frame = gtk.Frame("Kilo Commands")
        frame.add(hbox_buttons)
        vbox.pack_start(frame)

        # Display window
        window.add(vbox)
        window.show_all()

    def controlfile_selected(self, widget):
        self.controlfile = widget.get_filename()

    def programfile_selected(self, widget):
        self.programfile = widget.get_filename()

    def program_avr(self, widget):
        if os.path.isfile(self.programfile) and os.path.isfile(self.controlfile):
            outfile = tempfile.mkstemp(suffix=".hex")
            try:
                cmd = ["kbmerge", self.controlfile, self.programfile, outfile[1]]
                print subprocess.check_output(cmd)
            except:
                self.error_msg("Error calling "+" ".join(cmd))
                os.unlink(outfile[1])
            else:
                try:
                    cmd = ["kbprogram", outfile[1]]
                    print subprocess.check_output(cmd)
                except:
                    self.error_msg("Error calling "+" ".join(cmd))
                os.unlink(outfile[1])
        else:
            self.error_msg("Error when opening "+self.controlfile+" and "+self.programfile);


    def kbsend(self, widget, message):
        try:
            cmd = ["kbsend",message]
            print subprocess.check_output(cmd)
        except:
            self.error_msg("Error calling "+ " ".join(cmd))

    def error_msg(self, msg):
        md = gtk.MessageDialog(None, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR, gtk.BUTTONS_CLOSE, msg)
        md.run()
        md.destroy()

KilobotsGUI()
gtk.main()
